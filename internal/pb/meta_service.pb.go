// Code generated by protoc-gen-go. DO NOT EDIT.
// source: meta_service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MetaJoinReq struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *MetaJoinReq) Reset()                    { *m = MetaJoinReq{} }
func (m *MetaJoinReq) String() string            { return proto.CompactTextString(m) }
func (*MetaJoinReq) ProtoMessage()               {}
func (*MetaJoinReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *MetaJoinReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MetaJoinReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type MetaJoinResp struct {
	Result *ClusterResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *MetaJoinResp) Reset()                    { *m = MetaJoinResp{} }
func (m *MetaJoinResp) String() string            { return proto.CompactTextString(m) }
func (*MetaJoinResp) ProtoMessage()               {}
func (*MetaJoinResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *MetaJoinResp) GetResult() *ClusterResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type MetaRemoveReq struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *MetaRemoveReq) Reset()                    { *m = MetaRemoveReq{} }
func (m *MetaRemoveReq) String() string            { return proto.CompactTextString(m) }
func (*MetaRemoveReq) ProtoMessage()               {}
func (*MetaRemoveReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *MetaRemoveReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MetaRemoveResp struct {
	Result *ClusterResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *MetaRemoveResp) Reset()                    { *m = MetaRemoveResp{} }
func (m *MetaRemoveResp) String() string            { return proto.CompactTextString(m) }
func (*MetaRemoveResp) ProtoMessage()               {}
func (*MetaRemoveResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *MetaRemoveResp) GetResult() *ClusterResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type MetaApplyReq struct {
	Type MetaCmdType `protobuf:"varint,1,opt,name=type,enum=pb.MetaCmdType" json:"type,omitempty"`
	Data []byte      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MetaApplyReq) Reset()                    { *m = MetaApplyReq{} }
func (m *MetaApplyReq) String() string            { return proto.CompactTextString(m) }
func (*MetaApplyReq) ProtoMessage()               {}
func (*MetaApplyReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *MetaApplyReq) GetType() MetaCmdType {
	if m != nil {
		return m.Type
	}
	return MetaCmdType_MetaCmdTypeUnknown
}

func (m *MetaApplyReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type MetaApplyResp struct {
	Result *ClusterResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Data   []byte         `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MetaApplyResp) Reset()                    { *m = MetaApplyResp{} }
func (m *MetaApplyResp) String() string            { return proto.CompactTextString(m) }
func (*MetaApplyResp) ProtoMessage()               {}
func (*MetaApplyResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *MetaApplyResp) GetResult() *ClusterResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *MetaApplyResp) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*MetaJoinReq)(nil), "pb.MetaJoinReq")
	proto.RegisterType((*MetaJoinResp)(nil), "pb.MetaJoinResp")
	proto.RegisterType((*MetaRemoveReq)(nil), "pb.MetaRemoveReq")
	proto.RegisterType((*MetaRemoveResp)(nil), "pb.MetaRemoveResp")
	proto.RegisterType((*MetaApplyReq)(nil), "pb.MetaApplyReq")
	proto.RegisterType((*MetaApplyResp)(nil), "pb.MetaApplyResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Meta service

type MetaClient interface {
	// add meta node
	Join(ctx context.Context, in *MetaJoinReq, opts ...grpc.CallOption) (*MetaJoinResp, error)
	// remove meta node
	Remove(ctx context.Context, in *MetaRemoveReq, opts ...grpc.CallOption) (*MetaRemoveResp, error)
	// apply meta command
	Apply(ctx context.Context, in *MetaApplyReq, opts ...grpc.CallOption) (*MetaApplyResp, error)
}

type metaClient struct {
	cc *grpc.ClientConn
}

func NewMetaClient(cc *grpc.ClientConn) MetaClient {
	return &metaClient{cc}
}

func (c *metaClient) Join(ctx context.Context, in *MetaJoinReq, opts ...grpc.CallOption) (*MetaJoinResp, error) {
	out := new(MetaJoinResp)
	err := grpc.Invoke(ctx, "/pb.Meta/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaClient) Remove(ctx context.Context, in *MetaRemoveReq, opts ...grpc.CallOption) (*MetaRemoveResp, error) {
	out := new(MetaRemoveResp)
	err := grpc.Invoke(ctx, "/pb.Meta/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaClient) Apply(ctx context.Context, in *MetaApplyReq, opts ...grpc.CallOption) (*MetaApplyResp, error) {
	out := new(MetaApplyResp)
	err := grpc.Invoke(ctx, "/pb.Meta/Apply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Meta service

type MetaServer interface {
	// add meta node
	Join(context.Context, *MetaJoinReq) (*MetaJoinResp, error)
	// remove meta node
	Remove(context.Context, *MetaRemoveReq) (*MetaRemoveResp, error)
	// apply meta command
	Apply(context.Context, *MetaApplyReq) (*MetaApplyResp, error)
}

func RegisterMetaServer(s *grpc.Server, srv MetaServer) {
	s.RegisterService(&_Meta_serviceDesc, srv)
}

func _Meta_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaJoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Meta/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServer).Join(ctx, req.(*MetaJoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meta_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaRemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Meta/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServer).Remove(ctx, req.(*MetaRemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meta_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Meta/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServer).Apply(ctx, req.(*MetaApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Meta_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Meta",
	HandlerType: (*MetaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Meta_Join_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Meta_Remove_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _Meta_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meta_service.proto",
}

func init() { proto.RegisterFile("meta_service.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcf, 0x4b, 0xfb, 0x30,
	0x14, 0xa7, 0xa5, 0xdf, 0x7d, 0xf1, 0x6d, 0x56, 0xf7, 0xf0, 0x30, 0x7a, 0x71, 0xd4, 0xcb, 0x06,
	0x32, 0xa1, 0x1e, 0x44, 0x3c, 0xc9, 0x0e, 0x82, 0xa0, 0x87, 0xe0, 0x7d, 0xb4, 0xcd, 0x3b, 0x14,
	0x9a, 0x25, 0x36, 0xd9, 0xa0, 0xff, 0x85, 0x7f, 0xb2, 0x24, 0x69, 0xab, 0x8e, 0x5d, 0x76, 0xcb,
	0x7b, 0x9f, 0x1f, 0xf9, 0xe4, 0x43, 0x00, 0x05, 0x99, 0x7c, 0xa3, 0xa9, 0xd9, 0x57, 0x25, 0xad,
	0x54, 0x23, 0x8d, 0xc4, 0x50, 0x15, 0xc9, 0x55, 0x59, 0xef, 0xb4, 0xa1, 0x66, 0x53, 0x4a, 0x21,
	0xe4, 0xd6, 0x23, 0x49, 0xec, 0xd8, 0xa5, 0xe0, 0x7e, 0x4e, 0x1f, 0x60, 0xfc, 0x46, 0x26, 0x7f,
	0x95, 0xd5, 0x96, 0xd1, 0x27, 0xc6, 0x10, 0x56, 0x7c, 0x16, 0xcc, 0x83, 0x45, 0xc4, 0xc2, 0x8a,
	0xe3, 0x0c, 0xfe, 0xe7, 0x9c, 0x37, 0xa4, 0xf5, 0x2c, 0x9c, 0x07, 0x8b, 0x33, 0xd6, 0x8f, 0xe9,
	0x23, 0x4c, 0x7e, 0x84, 0x5a, 0xe1, 0x12, 0x46, 0x0d, 0xe9, 0x5d, 0x6d, 0x9c, 0x7a, 0x9c, 0x4d,
	0x57, 0xaa, 0x58, 0xad, 0x7d, 0x04, 0xe6, 0x00, 0xd6, 0x11, 0xd2, 0x6b, 0x38, 0xb7, 0x52, 0x46,
	0x42, 0xee, 0xe9, 0xc8, 0xad, 0xe9, 0x13, 0xc4, 0xbf, 0x09, 0xa7, 0xb9, 0xbf, 0xf8, 0x60, 0xcf,
	0x4a, 0xd5, 0xad, 0x35, 0xbf, 0x81, 0xc8, 0xb4, 0x8a, 0x9c, 0x30, 0xce, 0x2e, 0xac, 0xd0, 0xe2,
	0x6b, 0xc1, 0x3f, 0x5a, 0x45, 0xcc, 0x81, 0x88, 0x10, 0xf1, 0xdc, 0xe4, 0xee, 0x91, 0x13, 0xe6,
	0xce, 0xe9, 0xbb, 0x8f, 0xd9, 0x19, 0x9d, 0x14, 0xe2, 0x98, 0x5f, 0xf6, 0x15, 0x40, 0x64, 0x0d,
	0x71, 0x09, 0x91, 0xad, 0x0d, 0x87, 0x2c, 0x5d, 0xfb, 0xc9, 0xe5, 0xdf, 0x85, 0x56, 0x78, 0x07,
	0x23, 0xdf, 0x02, 0x4e, 0x7b, 0x6c, 0xa8, 0x2d, 0xc1, 0xc3, 0x95, 0x56, 0x78, 0x0b, 0xff, 0x5c,
	0x60, 0x1c, 0xbc, 0xfa, 0x22, 0x92, 0xe9, 0xc1, 0x46, 0xab, 0x62, 0xe4, 0x3e, 0xc1, 0xfd, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x3e, 0xdd, 0xd7, 0x44, 0x02, 0x00, 0x00,
}
