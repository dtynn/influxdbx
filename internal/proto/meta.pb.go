// Code generated by protoc-gen-go. DO NOT EDIT.
// source: meta.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Data struct {
	Term            uint64          `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Index           uint64          `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	ClusterID       uint64          `protobuf:"varint,3,opt,name=clusterID" json:"clusterID,omitempty"`
	MaxNodeID       uint64          `protobuf:"varint,4,opt,name=maxNodeID" json:"maxNodeID,omitempty"`
	MaxShardGroupID uint64          `protobuf:"varint,5,opt,name=maxShardGroupID" json:"maxShardGroupID,omitempty"`
	MaxShardID      uint64          `protobuf:"varint,6,opt,name=maxShardID" json:"maxShardID,omitempty"`
	MetaNodes       []*NodeInfo     `protobuf:"bytes,7,rep,name=metaNodes" json:"metaNodes,omitempty"`
	DataNodes       []*NodeInfo     `protobuf:"bytes,8,rep,name=dataNodes" json:"dataNodes,omitempty"`
	Databases       []*DatabaseInfo `protobuf:"bytes,9,rep,name=databases" json:"databases,omitempty"`
	Users           []*UserInfo     `protobuf:"bytes,10,rep,name=users" json:"users,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto1.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Data) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *Data) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Data) GetClusterID() uint64 {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *Data) GetMaxNodeID() uint64 {
	if m != nil {
		return m.MaxNodeID
	}
	return 0
}

func (m *Data) GetMaxShardGroupID() uint64 {
	if m != nil {
		return m.MaxShardGroupID
	}
	return 0
}

func (m *Data) GetMaxShardID() uint64 {
	if m != nil {
		return m.MaxShardID
	}
	return 0
}

func (m *Data) GetMetaNodes() []*NodeInfo {
	if m != nil {
		return m.MetaNodes
	}
	return nil
}

func (m *Data) GetDataNodes() []*NodeInfo {
	if m != nil {
		return m.DataNodes
	}
	return nil
}

func (m *Data) GetDatabases() []*DatabaseInfo {
	if m != nil {
		return m.Databases
	}
	return nil
}

func (m *Data) GetUsers() []*UserInfo {
	if m != nil {
		return m.Users
	}
	return nil
}

type NodeInfo struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto1.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *NodeInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NodeInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type DatabaseInfo struct {
	Name                   string                 `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DefaultRetentionPolicy string                 `protobuf:"bytes,2,opt,name=defaultRetentionPolicy" json:"defaultRetentionPolicy,omitempty"`
	RetentionPolicies      []*RetentionPolicyInfo `protobuf:"bytes,3,rep,name=retentionPolicies" json:"retentionPolicies,omitempty"`
	ContinuousQueries      []*ContinuousQueryInfo `protobuf:"bytes,4,rep,name=continuousQueries" json:"continuousQueries,omitempty"`
}

func (m *DatabaseInfo) Reset()                    { *m = DatabaseInfo{} }
func (m *DatabaseInfo) String() string            { return proto1.CompactTextString(m) }
func (*DatabaseInfo) ProtoMessage()               {}
func (*DatabaseInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *DatabaseInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DatabaseInfo) GetDefaultRetentionPolicy() string {
	if m != nil {
		return m.DefaultRetentionPolicy
	}
	return ""
}

func (m *DatabaseInfo) GetRetentionPolicies() []*RetentionPolicyInfo {
	if m != nil {
		return m.RetentionPolicies
	}
	return nil
}

func (m *DatabaseInfo) GetContinuousQueries() []*ContinuousQueryInfo {
	if m != nil {
		return m.ContinuousQueries
	}
	return nil
}

type RetentionPolicySpec struct {
	Name               *Str `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Duration           *I64 `protobuf:"bytes,2,opt,name=duration" json:"duration,omitempty"`
	ShardGroupDuration *I64 `protobuf:"bytes,3,opt,name=shardGroupDuration" json:"shardGroupDuration,omitempty"`
	ReplicaN           *I64 `protobuf:"bytes,4,opt,name=replicaN" json:"replicaN,omitempty"`
}

func (m *RetentionPolicySpec) Reset()                    { *m = RetentionPolicySpec{} }
func (m *RetentionPolicySpec) String() string            { return proto1.CompactTextString(m) }
func (*RetentionPolicySpec) ProtoMessage()               {}
func (*RetentionPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RetentionPolicySpec) GetName() *Str {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *RetentionPolicySpec) GetDuration() *I64 {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *RetentionPolicySpec) GetShardGroupDuration() *I64 {
	if m != nil {
		return m.ShardGroupDuration
	}
	return nil
}

func (m *RetentionPolicySpec) GetReplicaN() *I64 {
	if m != nil {
		return m.ReplicaN
	}
	return nil
}

type RetentionPolicyInfo struct {
	Name               string              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Duration           int64               `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"`
	ShardGroupDuration int64               `protobuf:"varint,3,opt,name=shardGroupDuration" json:"shardGroupDuration,omitempty"`
	ReplicaN           int64               `protobuf:"varint,4,opt,name=replicaN" json:"replicaN,omitempty"`
	ShardGroups        []*ShardGroupInfo   `protobuf:"bytes,5,rep,name=shardGroups" json:"shardGroups,omitempty"`
	Subscriptions      []*SubscriptionInfo `protobuf:"bytes,6,rep,name=subscriptions" json:"subscriptions,omitempty"`
}

func (m *RetentionPolicyInfo) Reset()                    { *m = RetentionPolicyInfo{} }
func (m *RetentionPolicyInfo) String() string            { return proto1.CompactTextString(m) }
func (*RetentionPolicyInfo) ProtoMessage()               {}
func (*RetentionPolicyInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *RetentionPolicyInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RetentionPolicyInfo) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *RetentionPolicyInfo) GetShardGroupDuration() int64 {
	if m != nil {
		return m.ShardGroupDuration
	}
	return 0
}

func (m *RetentionPolicyInfo) GetReplicaN() int64 {
	if m != nil {
		return m.ReplicaN
	}
	return 0
}

func (m *RetentionPolicyInfo) GetShardGroups() []*ShardGroupInfo {
	if m != nil {
		return m.ShardGroups
	}
	return nil
}

func (m *RetentionPolicyInfo) GetSubscriptions() []*SubscriptionInfo {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type ShardGroupInfo struct {
	ID          uint64       `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	StartTime   int64        `protobuf:"varint,2,opt,name=startTime" json:"startTime,omitempty"`
	EndTime     int64        `protobuf:"varint,3,opt,name=endTime" json:"endTime,omitempty"`
	DeletedAt   int64        `protobuf:"varint,4,opt,name=deletedAt" json:"deletedAt,omitempty"`
	Shards      []*ShardInfo `protobuf:"bytes,5,rep,name=shards" json:"shards,omitempty"`
	TruncatedAt int64        `protobuf:"varint,6,opt,name=truncatedAt" json:"truncatedAt,omitempty"`
}

func (m *ShardGroupInfo) Reset()                    { *m = ShardGroupInfo{} }
func (m *ShardGroupInfo) String() string            { return proto1.CompactTextString(m) }
func (*ShardGroupInfo) ProtoMessage()               {}
func (*ShardGroupInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ShardGroupInfo) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ShardGroupInfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ShardGroupInfo) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ShardGroupInfo) GetDeletedAt() int64 {
	if m != nil {
		return m.DeletedAt
	}
	return 0
}

func (m *ShardGroupInfo) GetShards() []*ShardInfo {
	if m != nil {
		return m.Shards
	}
	return nil
}

func (m *ShardGroupInfo) GetTruncatedAt() int64 {
	if m != nil {
		return m.TruncatedAt
	}
	return 0
}

type ShardInfo struct {
	ID     uint64        `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Owners []*ShardOwner `protobuf:"bytes,2,rep,name=owners" json:"owners,omitempty"`
}

func (m *ShardInfo) Reset()                    { *m = ShardInfo{} }
func (m *ShardInfo) String() string            { return proto1.CompactTextString(m) }
func (*ShardInfo) ProtoMessage()               {}
func (*ShardInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ShardInfo) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ShardInfo) GetOwners() []*ShardOwner {
	if m != nil {
		return m.Owners
	}
	return nil
}

type SubscriptionInfo struct {
	Name         string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Mode         string   `protobuf:"bytes,2,opt,name=mode" json:"mode,omitempty"`
	Destinations []string `protobuf:"bytes,3,rep,name=Destinations" json:"Destinations,omitempty"`
}

func (m *SubscriptionInfo) Reset()                    { *m = SubscriptionInfo{} }
func (m *SubscriptionInfo) String() string            { return proto1.CompactTextString(m) }
func (*SubscriptionInfo) ProtoMessage()               {}
func (*SubscriptionInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *SubscriptionInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SubscriptionInfo) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *SubscriptionInfo) GetDestinations() []string {
	if m != nil {
		return m.Destinations
	}
	return nil
}

type ShardOwner struct {
	NodeID uint64 `protobuf:"varint,1,opt,name=nodeID" json:"nodeID,omitempty"`
}

func (m *ShardOwner) Reset()                    { *m = ShardOwner{} }
func (m *ShardOwner) String() string            { return proto1.CompactTextString(m) }
func (*ShardOwner) ProtoMessage()               {}
func (*ShardOwner) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ShardOwner) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type ContinuousQueryInfo struct {
	Mame  string `protobuf:"bytes,1,opt,name=mame" json:"mame,omitempty"`
	Query string `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
}

func (m *ContinuousQueryInfo) Reset()                    { *m = ContinuousQueryInfo{} }
func (m *ContinuousQueryInfo) String() string            { return proto1.CompactTextString(m) }
func (*ContinuousQueryInfo) ProtoMessage()               {}
func (*ContinuousQueryInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *ContinuousQueryInfo) GetMame() string {
	if m != nil {
		return m.Mame
	}
	return ""
}

func (m *ContinuousQueryInfo) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type UserInfo struct {
	Name       string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Hash       string           `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	Admin      bool             `protobuf:"varint,3,opt,name=admin" json:"admin,omitempty"`
	Privileges []*UserPrivilege `protobuf:"bytes,4,rep,name=privileges" json:"privileges,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto1.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *UserInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *UserInfo) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

func (m *UserInfo) GetPrivileges() []*UserPrivilege {
	if m != nil {
		return m.Privileges
	}
	return nil
}

type UserPrivilege struct {
	Database  string `protobuf:"bytes,1,opt,name=database" json:"database,omitempty"`
	Privilege int32  `protobuf:"varint,2,opt,name=privilege" json:"privilege,omitempty"`
}

func (m *UserPrivilege) Reset()                    { *m = UserPrivilege{} }
func (m *UserPrivilege) String() string            { return proto1.CompactTextString(m) }
func (*UserPrivilege) ProtoMessage()               {}
func (*UserPrivilege) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *UserPrivilege) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *UserPrivilege) GetPrivilege() int32 {
	if m != nil {
		return m.Privilege
	}
	return 0
}

func init() {
	proto1.RegisterType((*Data)(nil), "proto.Data")
	proto1.RegisterType((*NodeInfo)(nil), "proto.NodeInfo")
	proto1.RegisterType((*DatabaseInfo)(nil), "proto.DatabaseInfo")
	proto1.RegisterType((*RetentionPolicySpec)(nil), "proto.RetentionPolicySpec")
	proto1.RegisterType((*RetentionPolicyInfo)(nil), "proto.RetentionPolicyInfo")
	proto1.RegisterType((*ShardGroupInfo)(nil), "proto.ShardGroupInfo")
	proto1.RegisterType((*ShardInfo)(nil), "proto.ShardInfo")
	proto1.RegisterType((*SubscriptionInfo)(nil), "proto.SubscriptionInfo")
	proto1.RegisterType((*ShardOwner)(nil), "proto.ShardOwner")
	proto1.RegisterType((*ContinuousQueryInfo)(nil), "proto.ContinuousQueryInfo")
	proto1.RegisterType((*UserInfo)(nil), "proto.UserInfo")
	proto1.RegisterType((*UserPrivilege)(nil), "proto.UserPrivilege")
}

func init() { proto1.RegisterFile("meta.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 735 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0xcb, 0x6e, 0x14, 0x3b,
	0x10, 0xd5, 0x3c, 0x33, 0x53, 0x93, 0xa7, 0x93, 0x9b, 0xdb, 0x1a, 0x5d, 0x45, 0x51, 0xeb, 0x82,
	0x86, 0x05, 0x91, 0x08, 0x51, 0x90, 0x90, 0x10, 0x42, 0xb4, 0x80, 0xd9, 0x84, 0xd0, 0x81, 0x2d,
	0x92, 0xd3, 0x76, 0x88, 0xa5, 0xe9, 0xee, 0xc1, 0x76, 0x43, 0xd8, 0xb0, 0xe7, 0xb3, 0xe0, 0x83,
	0xf2, 0x0d, 0xc8, 0x65, 0xbb, 0x1f, 0xf3, 0x58, 0x4d, 0xbb, 0xce, 0x39, 0x55, 0xa7, 0xfc, 0xa8,
	0x01, 0x48, 0xb9, 0xa6, 0x27, 0x73, 0x99, 0xeb, 0x9c, 0xf4, 0xf0, 0x67, 0xbc, 0x99, 0xe4, 0x69,
	0x9a, 0x67, 0x36, 0x18, 0xde, 0xb7, 0xa1, 0x1b, 0x51, 0x4d, 0x09, 0x81, 0xae, 0xe6, 0x32, 0x0d,
	0x5a, 0xc7, 0xad, 0x49, 0x37, 0xc6, 0x6f, 0x72, 0x00, 0x3d, 0x91, 0x31, 0x7e, 0x17, 0xb4, 0x31,
	0x68, 0x17, 0xe4, 0x3f, 0x18, 0x26, 0xb3, 0x42, 0x69, 0x2e, 0xa7, 0x51, 0xd0, 0x41, 0xa4, 0x0a,
	0x18, 0x34, 0xa5, 0x77, 0x17, 0x39, 0xe3, 0xd3, 0x28, 0xe8, 0x5a, 0xb4, 0x0c, 0x90, 0x09, 0xec,
	0xa4, 0xf4, 0xee, 0xea, 0x96, 0x4a, 0xf6, 0x56, 0xe6, 0xc5, 0x7c, 0x1a, 0x05, 0x3d, 0xe4, 0x2c,
	0x86, 0xc9, 0x11, 0x80, 0x0f, 0x4d, 0xa3, 0xa0, 0x8f, 0xa4, 0x5a, 0x84, 0x3c, 0x86, 0xa1, 0xe9,
	0xcd, 0xe4, 0x55, 0xc1, 0xc6, 0x71, 0x67, 0x32, 0x3a, 0xdd, 0xb1, 0x3d, 0x9d, 0x60, 0xad, 0xec,
	0x26, 0x8f, 0x2b, 0x86, 0xa1, 0x33, 0xea, 0xe9, 0x83, 0x35, 0xf4, 0x92, 0x41, 0x9e, 0x58, 0xfa,
	0x35, 0x55, 0x5c, 0x05, 0x43, 0xa4, 0xef, 0x3b, 0x7a, 0xe4, 0xe2, 0x95, 0x04, 0x59, 0xe4, 0x01,
	0xf4, 0x0a, 0xc5, 0xa5, 0x0a, 0xa0, 0x91, 0xfd, 0x93, 0xe2, 0x12, 0xa9, 0x16, 0x0d, 0xcf, 0x60,
	0xe0, 0x0b, 0x92, 0x6d, 0x68, 0x0b, 0xe6, 0x76, 0xbc, 0x2d, 0x18, 0x09, 0x60, 0x83, 0x32, 0x26,
	0xb9, 0x52, 0xb8, 0xe3, 0xc3, 0xd8, 0x2f, 0xc3, 0xfb, 0x16, 0x6c, 0xd6, 0x0b, 0x9b, 0xe3, 0xca,
	0x68, 0xca, 0x51, 0x3c, 0x8c, 0xf1, 0x9b, 0x9c, 0xc3, 0x21, 0xe3, 0x37, 0xb4, 0x98, 0xe9, 0x98,
	0x6b, 0x9e, 0x69, 0x91, 0x67, 0x97, 0xf9, 0x4c, 0x24, 0x3f, 0x5c, 0xb6, 0x35, 0x28, 0x79, 0x07,
	0x7b, 0xb2, 0x11, 0x12, 0x5c, 0x05, 0x1d, 0xec, 0x62, 0xec, 0xba, 0x58, 0x90, 0x60, 0x43, 0xcb,
	0x22, 0x93, 0x29, 0xc9, 0x33, 0x2d, 0xb2, 0x22, 0x2f, 0xd4, 0x87, 0x82, 0x4b, 0x93, 0xa9, 0xdb,
	0xc8, 0xf4, 0xba, 0x81, 0xbb, 0x4c, 0x4b, 0xa2, 0xf0, 0x77, 0x0b, 0xf6, 0x17, 0x8a, 0x5e, 0xcd,
	0x79, 0x42, 0x8e, 0x6a, 0x7d, 0x8f, 0x4e, 0xc1, 0x25, 0xbd, 0xd2, 0xd2, 0xed, 0xc1, 0x43, 0x18,
	0xb0, 0x42, 0x52, 0xa3, 0xc2, 0xae, 0x2b, 0xce, 0xf4, 0xfc, 0x2c, 0x2e, 0x31, 0xf2, 0x1c, 0x88,
	0x2a, 0xaf, 0x5b, 0xe4, 0x15, 0x9d, 0x25, 0xc5, 0x0a, 0x96, 0xa9, 0x21, 0xf9, 0x7c, 0x26, 0x12,
	0x7a, 0x81, 0x37, 0x7c, 0xa1, 0x86, 0xc7, 0xc2, 0x5f, 0xed, 0xa5, 0x1e, 0xd6, 0x9e, 0xdd, 0x78,
	0xc1, 0x77, 0xa7, 0xe6, 0xf5, 0x64, 0xad, 0xd7, 0xce, 0x4a, 0x7f, 0xe3, 0x05, 0x7f, 0x9d, 0xca,
	0x13, 0x79, 0x06, 0xa3, 0x4a, 0xa1, 0x82, 0x1e, 0x9e, 0xcd, 0x3f, 0x7e, 0x1b, 0xab, 0x07, 0x68,
	0x8e, 0xa5, 0xce, 0x24, 0x2f, 0x60, 0x4b, 0x15, 0xd7, 0x2a, 0x91, 0x62, 0x6e, 0x8a, 0xa8, 0xa0,
	0x8f, 0xd2, 0x7f, 0xbd, 0xb4, 0x86, 0xa1, 0xb8, 0xc9, 0x0e, 0xff, 0xb4, 0x60, 0xbb, 0x99, 0xde,
	0xdc, 0xfe, 0x69, 0xe4, 0x6f, 0xbf, 0x9d, 0x1c, 0x4a, 0x53, 0xa9, 0x3f, 0x8a, 0x94, 0xbb, 0x3d,
	0xa8, 0x02, 0xe6, 0x6d, 0xf0, 0x8c, 0x21, 0x66, 0x3b, 0xf7, 0x4b, 0xa3, 0x63, 0x7c, 0xc6, 0x35,
	0x67, 0xaf, 0xb4, 0xeb, 0xb7, 0x0a, 0x90, 0x09, 0xf4, 0xb1, 0x0d, 0xdf, 0xeb, 0x6e, 0xbd, 0x57,
	0x74, 0xea, 0x70, 0x72, 0x0c, 0x23, 0x2d, 0x8b, 0x2c, 0xa1, 0x36, 0x53, 0x1f, 0x33, 0xd5, 0x43,
	0xe1, 0x1b, 0x18, 0x96, 0xb2, 0x25, 0xfb, 0x8f, 0xa0, 0x9f, 0x7f, 0xcf, 0xcc, 0x00, 0x68, 0x63,
	0xa1, 0xbd, 0x7a, 0xa1, 0xf7, 0x06, 0x89, 0x1d, 0x21, 0xfc, 0x0c, 0xbb, 0x8b, 0xfb, 0xb5, 0xf2,
	0x52, 0x10, 0xe8, 0xa6, 0x39, 0xe3, 0xee, 0xf9, 0xe2, 0x37, 0x09, 0x61, 0x33, 0xe2, 0x4a, 0x8b,
	0x8c, 0xda, 0x63, 0x30, 0xef, 0x74, 0x18, 0x37, 0x62, 0xe1, 0xff, 0x00, 0x55, 0x55, 0x72, 0x08,
	0xfd, 0xcc, 0x8e, 0x63, 0x6b, 0xd6, 0xad, 0xc2, 0x97, 0xb0, 0xbf, 0xe2, 0x31, 0x62, 0xd1, 0x9a,
	0x11, 0xf3, 0x6d, 0xfe, 0x08, 0xbe, 0x1a, 0x82, 0x73, 0x62, 0x17, 0xe1, 0x4f, 0x18, 0xf8, 0xe9,
	0xb6, 0xce, 0xfe, 0x2d, 0x55, 0xb7, 0xde, 0xbe, 0xf9, 0x36, 0x99, 0x28, 0x4b, 0x85, 0xbd, 0xbe,
	0x83, 0xd8, 0x2e, 0xc8, 0x19, 0xc0, 0x5c, 0x8a, 0x6f, 0x62, 0xc6, 0xbf, 0x94, 0x03, 0xe3, 0xa0,
	0x36, 0x40, 0x2f, 0x3d, 0x18, 0xd7, 0x78, 0xe1, 0x14, 0xb6, 0x1a, 0x20, 0x3e, 0x22, 0x37, 0x24,
	0x9d, 0x91, 0x72, 0x6d, 0x6e, 0x49, 0x29, 0x45, 0x47, 0xbd, 0xb8, 0x0a, 0x5c, 0xf7, 0xb1, 0xd6,
	0xd3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xac, 0x08, 0x5d, 0x9e, 0x30, 0x07, 0x00, 0x00,
}
