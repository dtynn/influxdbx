syntax = "proto3";
package internal;

message OptionalInt64 {
	int64 val = 1;
}

message OptionalString {
	string val = 1;
}

message RetentionPolicySpec {
	string name = 1;
	OptionalInt64 replicaN = 2;
	OptionalInt64 duration = 3;
	int64 ShardGroupDuration = 4;
}

message RetentionPolicyUpdate {
	OptionalString name = 1;
	OptionalInt64 replicaN = 2;
	OptionalInt64 duration = 3;
	OptionalInt64 ShardGroupDuration = 4;
}

message UserInfo {
	string name = 1;
	string hash = 2;
	bool admin = 3;
	map<string, int64> privileges = 4;
}

// acquire lease
message MetaAcquireLeaseCmd {
	string name = 1;
}

// continuous query cmd
message MetaCreateContinuousQueryCmd {
	string database = 1;
	string name = 2;
	string query = 3;
}

message MetaDropContinuousQueryCmd {
	string database = 1;
	string name = 2;
}

// database cmd
message MetaDatabaseCmd {
	string name = 1;
}

message MetaCreateDatabaseCmd {
	string name = 1;
}

message MetaCreateDatabaseWithRetentionPolicyCmd {
	string name = 1;
	RetentionPolicySpec spec = 2;
}

message MetaDropDatabaseCmd {
	string name = 1;
}

// retention policy
message MetaCreateRetentionPolicyCmd {
	string database = 1;
	RetentionPolicySpec spec = 2;
	bool makeDefault = 3;
}

message MetaRetentionPolicyCmd {
	string database = 1;
	string name = 2;
}

message MetaDropRetentionPolicyCmd {
	string database = 1;
	string name = 2;
}

message MetaUpdateRetentionPolicyCmd {
	string database = 1;
	string name = 2;
	RetentionPolicyUpdate update = 3;
	bool makeDefault = 4;
}

// subsription
message MetaCreateSubscriptionCmd {
	string database = 1;
	string rp = 2;
	string name = 3;
	string mode = 4;
	repeated string destinations = 5;
}

message MetaDropSubscriptionCmd {
	string database = 1;
	string rp = 2;
	string name = 3;
}

// user cmd
message MetaUserCmd {
	string name = 1;
}

message MetaCreateUserCmd {
	string name = 1;
	string password = 2;
	bool admin = 3;
}

message MetaDropUserCmd {
	string name = 1;
}

message MetaUpdateUserCmd {
	string name = 1;
	string password = 2;
}

// user privilege
message MetaSetAdminPrivilegeCmd {
	string username =1;
	bool admin = 2;
}

message MetaSetPrivilegeCmd {
	string username = 1;
	string database = 2;
	int64 privilege = 3;
}

message MetaUserPrivilegesCmd {
	string username = 1;
}

message MetaUserPrivilegeCmd {
	string username = 1;
	string database = 2;
}

message MetaAuthenticateCmd {
	string username = 1;
	string password = 2;
}

// shard
message MetaShardGroupsByTimeRangeCmd {
	string database = 1;
	string policy = 2;
	int64 tmin = 3;
	int64 tmax = 4;
}

message MetaDropShardCmd {
	uint64 id = 1;
}

message MetaCreateShardGroupCmd {
	string database = 1;
	string policy = 2;
	int64 timestamp = 3;
}

message MetaDeleteShardGroupCmd {
	string database = 1;
	string policy = 2;
	uint64 id = 3;
}

message MetaPrecreateShardGroupsCmd {
	int64 from = 1;
	int64 to = 2;
}

message DataCreateShardCmd {
	string database = 1;
	string policy = 2;
	uint64 shardID = 3;
	bool enabled = 4;
}

message DataWriteToShardCmd {
	uint64 shardID = 1;
	bytes pointData = 2;
}

message DataDeleteShardCmd {
	uint64 id = 1;
}

message DataShardGroupCmd {
	repeated uint64 ids = 1;
}

message DataDeleteDatabaseCmd {
	string name = 1;
}

message DataDeleteRetentionPolicyCmd {
	string database = 1;
	string name = 2;
}

message DataDeleteMeasurementCmd {
	string database = 1;
	string name = 2;
}

message DataMeasurementNamesCmd {
	UserInfo user = 1;
	string database = 2;
	string condition = 3;
}

message DataMeasurementsCardinalityCmd {
	string database = 1;
}

message DataDeleteSeriesCmd {
	string database = 1;
	bytes sourceData = 2;
	string condition = 3;
}

message DataSeriesCardinalityCmd {
	string database = 1;
}

message DataTagKeysCmd {
	UserInfo user = 1;
	repeated uint64 shardIDs = 2;
	string condition = 3;
}

message DataTagValuesCmd {
	UserInfo user = 1;
	repeated uint64 shardIDs = 2;
	string condition = 3;
}
