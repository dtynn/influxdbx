// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cluster.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Node struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto1.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ClusterJoinReq struct {
	Node []*Node `protobuf:"bytes,1,rep,name=node" json:"node,omitempty"`
}

func (m *ClusterJoinReq) Reset()                    { *m = ClusterJoinReq{} }
func (m *ClusterJoinReq) String() string            { return proto1.CompactTextString(m) }
func (*ClusterJoinReq) ProtoMessage()               {}
func (*ClusterJoinReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ClusterJoinReq) GetNode() []*Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type ClusterJoinResp struct {
	Result *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Leader *Leader `protobuf:"bytes,2,opt,name=leader" json:"leader,omitempty"`
}

func (m *ClusterJoinResp) Reset()                    { *m = ClusterJoinResp{} }
func (m *ClusterJoinResp) String() string            { return proto1.CompactTextString(m) }
func (*ClusterJoinResp) ProtoMessage()               {}
func (*ClusterJoinResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ClusterJoinResp) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ClusterJoinResp) GetLeader() *Leader {
	if m != nil {
		return m.Leader
	}
	return nil
}

type ClusterRemoveReq struct {
	Node []*Node `protobuf:"bytes,1,rep,name=node" json:"node,omitempty"`
}

func (m *ClusterRemoveReq) Reset()                    { *m = ClusterRemoveReq{} }
func (m *ClusterRemoveReq) String() string            { return proto1.CompactTextString(m) }
func (*ClusterRemoveReq) ProtoMessage()               {}
func (*ClusterRemoveReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ClusterRemoveReq) GetNode() []*Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type ClusterRemoveResp struct {
	Result *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Leader *Leader `protobuf:"bytes,2,opt,name=leader" json:"leader,omitempty"`
}

func (m *ClusterRemoveResp) Reset()                    { *m = ClusterRemoveResp{} }
func (m *ClusterRemoveResp) String() string            { return proto1.CompactTextString(m) }
func (*ClusterRemoveResp) ProtoMessage()               {}
func (*ClusterRemoveResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ClusterRemoveResp) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ClusterRemoveResp) GetLeader() *Leader {
	if m != nil {
		return m.Leader
	}
	return nil
}

func init() {
	proto1.RegisterType((*Node)(nil), "proto.Node")
	proto1.RegisterType((*ClusterJoinReq)(nil), "proto.ClusterJoinReq")
	proto1.RegisterType((*ClusterJoinResp)(nil), "proto.ClusterJoinResp")
	proto1.RegisterType((*ClusterRemoveReq)(nil), "proto.ClusterRemoveReq")
	proto1.RegisterType((*ClusterRemoveResp)(nil), "proto.ClusterRemoveResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cluster service

type ClusterClient interface {
	// add nodes to cluster
	Join(ctx context.Context, in *ClusterJoinReq, opts ...grpc.CallOption) (*ClusterJoinResp, error)
	// remove nodes to cluster
	Remove(ctx context.Context, in *ClusterRemoveReq, opts ...grpc.CallOption) (*ClusterRemoveResp, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) Join(ctx context.Context, in *ClusterJoinReq, opts ...grpc.CallOption) (*ClusterJoinResp, error) {
	out := new(ClusterJoinResp)
	err := grpc.Invoke(ctx, "/proto.Cluster/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Remove(ctx context.Context, in *ClusterRemoveReq, opts ...grpc.CallOption) (*ClusterRemoveResp, error) {
	out := new(ClusterRemoveResp)
	err := grpc.Invoke(ctx, "/proto.Cluster/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cluster service

type ClusterServer interface {
	// add nodes to cluster
	Join(context.Context, *ClusterJoinReq) (*ClusterJoinResp, error)
	// remove nodes to cluster
	Remove(context.Context, *ClusterRemoveReq) (*ClusterRemoveResp, error)
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterJoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cluster/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Join(ctx, req.(*ClusterJoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cluster/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Remove(ctx, req.(*ClusterRemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Cluster_Join_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Cluster_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}

func init() { proto1.RegisterFile("cluster.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x50, 0x3f, 0x4b, 0xc3, 0x40,
	0x14, 0x27, 0x31, 0xa6, 0xf8, 0x62, 0xab, 0x3e, 0x50, 0x8f, 0x2c, 0x96, 0x80, 0xd0, 0xa9, 0x68,
	0x8a, 0x93, 0xa3, 0x9b, 0x88, 0xc3, 0x7d, 0x01, 0x89, 0xbd, 0x37, 0x04, 0x92, 0xbc, 0x78, 0x97,
	0xba, 0xf9, 0xdd, 0x25, 0xef, 0x4e, 0x25, 0xd2, 0xc1, 0xc1, 0x29, 0xe4, 0xf7, 0xff, 0x1d, 0xcc,
	0xb7, 0xcd, 0xce, 0x0d, 0x64, 0xd7, 0xbd, 0xe5, 0x81, 0xf1, 0x50, 0x3e, 0xf9, 0xf1, 0x96, 0xdb,
	0x96, 0x3b, 0x0f, 0x16, 0x37, 0x90, 0x3c, 0xb3, 0x21, 0x5c, 0x40, 0x5c, 0x1b, 0x15, 0x2d, 0xa3,
	0xd5, 0x91, 0x8e, 0x6b, 0x83, 0x0a, 0x66, 0x95, 0x31, 0x96, 0x9c, 0x53, 0xb1, 0x80, 0x5f, 0xbf,
	0xc5, 0x2d, 0x2c, 0x1e, 0x7c, 0xee, 0x23, 0xd7, 0x9d, 0xa6, 0x37, 0xbc, 0x82, 0xa4, 0x63, 0x43,
	0x2a, 0x5a, 0x1e, 0xac, 0xb2, 0x32, 0xf3, 0xc9, 0xeb, 0x31, 0x56, 0x0b, 0x51, 0xbc, 0xc0, 0xc9,
	0xc4, 0xe2, 0x7a, 0xbc, 0x86, 0xd4, 0x92, 0xdb, 0x35, 0x83, 0x74, 0x66, 0xe5, 0x3c, 0xb8, 0xb4,
	0x80, 0x3a, 0x90, 0xa3, 0xac, 0xa1, 0xca, 0x90, 0x95, 0x15, 0x3f, 0xb2, 0x27, 0x01, 0x75, 0x20,
	0x8b, 0x0d, 0x9c, 0x86, 0x02, 0x4d, 0x2d, 0xbf, 0xd3, 0x9f, 0x56, 0x55, 0x70, 0xf6, 0xcb, 0xf4,
	0xdf, 0xbb, 0xca, 0x0f, 0x98, 0x85, 0x0a, 0xbc, 0x83, 0x64, 0x3c, 0x1e, 0xcf, 0x83, 0x72, 0xfa,
	0x86, 0xf9, 0xc5, 0x3e, 0xd8, 0xf5, 0x78, 0x0f, 0xa9, 0x5f, 0x87, 0x97, 0x53, 0xc5, 0xf7, 0xa1,
	0xb9, 0xda, 0x4f, 0xb8, 0xfe, 0x35, 0x15, 0x62, 0xf3, 0x19, 0x00, 0x00, 0xff, 0xff, 0x42, 0x76,
	0x07, 0xe5, 0x09, 0x02, 0x00, 0x00,
}
